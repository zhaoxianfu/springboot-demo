#设置服务的端口号
server:
  port: 8080

#设置banner显示的这个项目的版本号
application:
  version: v1.0.0.RELEASE

spring:
  application:
    name: redis-demo
  #默认多环境属性文件配置
  profiles:
    active: dev
  #启动aop配置
  aop:
    auto: true

  #缓存配置-->1.会根据配置文件自动帮我们创建RedisCacheManager作为spring的缓存管理器
  #          2.或者自定义创建RedisCacheManager,放到容器中
#  cache:
#    cache-names: redisCache      #配置缓存名称,多个名称可以使用逗号分隔,以便于缓存注解中引用---->这个也会作为key的前缀，再加上声明的前缀,再加上方法上声明的前缀
#    type: REDIS                  #缓存类型,在默认的情况下,spring会自动根据上下文推测,自动帮我们创建RedisCacheManager作为spring的缓存管理器
#    redis:
#      cache-null-values: true    #允许redis缓存空值
#      key-prefix: redis110         #redis缓存的键前缀
#      use-key-prefix: true       #是否启用redis的键前缀     启用的话是cache-name:key-prefix:方法上定义的key,设置为false的话,只启用方法上定义的key
#      time-to-live: 600000          #缓存的超时时间戳,配置为0则不设置超时时间

  #redis的相关配置
  redis:
    database: 0           #redis操作的数据库,从0-15,我们这里选择0
    host: 127.0.1         #redis的地址
    port: 6379            #redis的端口号
    jedis:
      pool:
        max-active: 30       #最大激活连接数
        max-wait: -1         #-1代表不限制
        max-idle: 10         #最大空闲连接数
        min-idle: 5          #最小空闲连接数
    timeout: 3000            #redis连接超时时间,单位毫秒
    password:                #redis默认没有密码

  #数据源的相关配置
  datasource:
    url: jdbc:mysql://localhost:3306/redis_demo?serverTimezone=UTC&useSSL=false&useUnicode=true&characterEncoding=utf8&autoReconnect=true&allowMultiQueries=true          #数据库的连接地址
    driverclassname: com.mysql.cj.jdbc.Driver               #mysql数据库连接驱动
    username: root                                          #用户名
    password: 123456                                        #密码

    ##########################  druid配置   ##########################
    type: com.alibaba.druid.pool.DruidDataSource
    #druid_config
    druid:
      validation-query: "SELECT 'X' FROM DUAL"
      max-wait: 10000 #最大建立连接等待时间。如果超过此时间将接到异常。设为-1表示无限制
      max-idle: 10 #最大空闲数，数据库连接的最大空闲时间。超过空闲时间，数据库连接将被释放。设为0表示无限制
      min-idle: 5  #最小空闲连接:连接池中容许保持空闲状态的最小连接数量,低于这个数量将创建新的连接
      max_active: 50   #连接池的最大数据库连接数。设为0表示无限制
      initial-size: 5  #初始化连接:连接池启动时创建的初始化连接数量
      test-on-borrow: false
      test-while-idle: true
      remove_abandoned: true #超过removeAbandonedTimeout时间后，是否进 行没用连接（废弃）的回收（默认为false，调整为true)
      remove_abandoned_timeout: 180 #超过时间限制，回收没有用(废弃)的连接（默认为 300秒，调整为180）
      time-between-eviction-runs-millis: 18800
      pool-prepared-statements: true
      max-pool-prepared-statement-per-connection-size: 20
      connection-properties: config.decrypt=true;druid.stat.mergeSql=true;druid.stat.slowSqlMillis=5000
      filters: stat,wall,log4j2

  #email的相关配置
  mail:
    host: smtp.qq.com             #根据发件人的邮箱是什么邮箱确定的
    port: 465
    protocol: smtp                #邮箱发送的协议
    properties:
      mail:
        smtp:
          connecttimeout: 5000
          timeout: 3000
          writetimeout: 5000
          # 设置是否需要认证,如果为true,那么用户名和密码就必须的
          # 如果设置false,可以不设置用户名和密码,当然也得看你的对接的平台是否支持无密码进行访问的。
          auth: true
          ssl:
            enable: true           #是否用启用加密传送的协议验证项
          starttls:                # STARTTLS[1]是对纯文本通信协议的扩展。它提供一种方式将纯文本连接升级为加密连接（TLS或SSL）,而不是另外使用一个端口作加密通信。
            enable: true
            required: true
    default-encoding: UTF-8        #Default MimeMessage encoding编码格式
    username: 502162511@qq.com     #发送方的邮箱号码
    password: ydrvmfixzudebjij     #注意：在spring.mail.password处的值是需要在邮箱设置里面生成的授权码，这个不是真实的密码。

  #jackson配置
  jackson:
    #日期格式化
    date-format: yyyy-MM-dd HH:mm:ss      #指明前端传入的这种格式的字符串转换为我们后端的Date类型或者前端传时间戳格式(毫秒值),网络传输时一般都是时间戳--比如我们内部服务之间调用,都是时间戳
    time-zone: GMT+08                     #指明前后端转换日期的时区
    serialization:
      write-dates-as-timestamps: false
      #格式化输出
      indent_output: true
      #忽略无法转换的对象
      fail_on_empty_beans: false
      #设置空如何序列化
    defaultPropertyInclusion: non_null    #设置这个可以返回给前端时不显示属性为空的属性,只显示存在数据的属性
    serialization-inclusion: NON_NULL     #指的是对对象进行序列化的时候可以将属性为空的省略掉,不进行属性进行变成字符串
    deserialization:
      #允许对象忽略json中不存在的属性
      fail_on_unknown_properties: true
    parser:
      #允许出现特殊字符和转义符
      allow_unquoted_control_chars: true
      #允许出现单引号
      allow_single_quotes: true

#控制banner是否停用,在哪里显示
      # * Banner.Mode.OFF:关闭;
      # * Banner.Mode.CONSOLE:控制台输出，默认方式;
      # * Banner.Mode.LOG:日志输出方式;
  main:
    banner-mode: 'CONSOLE'

  #mybatis的配置
  #mybatis:
  type-aliases-package: com.redis.demo.redisdemo.dataobject       #DO对象别名
  configuration:
    map-underscore-to-camel-case: true                           #支持DO对象属性和数据库字段驼峰映射
  mapper-locations: classpath*:mappers/**/*Mapper.xml
  config:
    log-impl: orh.apache.ibatis.logging.stdout.StdOutImpl        #输出sql执行语句

#mybatis-plus配置
#mybatis-plus:
#  mappers-locations: classpath*:mappers/**/*Mapper.xml
#  #实体扫描，多个package用逗号或者分号分隔
#  typeAliasesPackage: com.redis.demo.redisdemo.dataobject
#  global-config:
#    #主键类型  0:"数据库ID自增", 1:"用户输入ID",2:"全局唯一ID (数字类型唯一ID)", 3:"全局唯一ID UUID";
#    id-type: 2
#    #字段策略 0:"忽略判断",1:"非 NULL 判断"),2:"非空判断"
#    field-strategy: 2
#    #驼峰下划线转换
#    db-column-underline: true
#    #刷新mapper 调试神器
#    refresh-mappers: true
#    #数据库大写下划线转换
#    capital-mode: true
#    #序列接口实现类配置
#    #key-generator: com.baomidou.springboot.xxx
#    #逻辑删除配置（下面3个配置）
#    logic-delete-value: 0
#    logic-not-delete-value: 1
#    #自定义SQL注入器
#    #sql-injector: com.baomidou.mybatisplus.mappers.LogicSqlInjector
#    #自定义填充策略接口实现
#    #meta-object-handler: com.baomidou.springboot.xxx
#  configuration:
#    map-underscore-to-camel-case: true
#    cache-enabled: true

#============== kafka ===================
kafka:
  producer:
    servers: 127.0.0.1:9092
    retries: 0
    batch:
      size: 4096
    linger: 1
    buffer:
      memory: 40960

  consumer:
    zookeeper:
      connect: 127.0.0.1:2181
    servers: 127.0.0.1:9092
    enable:
      auto:
        commit: true
    session:
      timeout: 6000
    auto:
      commit:
        interval: 100
      offset:
        reset: latest
    topic: test
    group:
      id: test
    concurrency: 10

#切面进行日志管理,设置可进行拔插的功能, true为开启这个切面,值为空或者为false为不开启这个切面
log:
  logAspect1:
    enabled: false
  logAspect2:
    enabled: true

  provider:
    enabled: true
  feign:
    enabled: true

#配置用户登录拦截器注册不注册到容器中,设置可拔插的功能,自己控制这个bean是否注入到容器中,true为注入这个拦截器,值为空或者为false为不注入这个拦截器
interceptor:
  loginInterceptor:
    enabled: false

#配置过滤器-->设置可进行拔插的功能,自己控制这个bean是否注入到容器中,true为注入这个过滤器,值为空或者为false为不注入这个过滤器
filter:
  myFilter1:
    enabled: true
  myFilter2:
    enabled: true

##发送邮件地址
mail:
  fromMail:
    sender: ${spring.mail.username}   #必须和我们发送方的邮箱号码一致
    ##接收邮件地址
    receiver: 1942529344@qq.com

#端点的相关配置
management:
  server:
    servlet:
      context-path: /
    ssl:
      enabled: false
  endpoints:
    web:
      exposure:
        include: "*"           #开放所有的端点进行可以进行访问
  endpoint:
    health:
      show-details: always     #调用health端点的时候显示所有的健康信息(包括redis等其他的一些)

#全局的负载均衡配置，配置所有的服务提供端的负载均衡策略(按照什么去调用集群的多个服务)，值为IRule的实现类，默认情况为轮询方式。
ribbon:                       #配置对同一个服务不同实例的负载均衡
  ConnectTimeout: 250         #连接超时时间(ms)
  ReadTimeout: 2000           #通信超时时间(ms)
  OkToRetryOnAllOperations: true    #是否对所有操作重试
  MaxAutoRetriesNextServer: 1       #同一服务切换实例的重试次数
  MaxAutoRetries: 2                 # 对当前服务实例的重试次数
  # 设置消费端熔断机制对的时间，当超过这个时间就会，就会断开请求服务，调用自己写的方法返回数据
  # 一般需要设置熔断机制的时间大于重试机制的时间
hystrix:
  command:
    default:
      execution:
        isolation:
          thread:
            timeoutInMillisecond: 10000 # 熔断超时时长：10s，当请求服务超过10s这个时间就会进行调用熔断需要执行的方法,这个时间要大于重试机制的Ribbon连接超时时间

#设置日志级别---可以针对一个文件夹下指定日志的级别,也可以在logback.xml里面配置root下的普遍的日志级别,也可以单独指定一个包下的日志级别进行打印
logging:
  config: classpath:logback.xml
  level:
    root: info